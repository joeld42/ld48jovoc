//------------------------------------------------------------------------------
//  shaders.shd
//  Annotated GLSL shaders for TestApp sample
//------------------------------------------------------------------------------

@uniform_block vsParams VSParams
mat4 mvp ModelViewProjection
@end

@texture_block textures Textures
sampler2D tex Texture
@end

//------------------------------------------------------------------------------
//  Vertex and fragment shaders for rendering into the offscreen render target
//
@vs offscreenVS
@use_uniform_block vsParams
@in vec4 position
@in vec4 normal
@out vec4 nrm
{
    _position = mul(mvp, position);
    nrm = normal;
}
@end

@fs offscreenFS
@in vec4 nrm
{
    _color = nrm * 0.5 + 0.5;
}
@end

@program OffscreenShader offscreenVS offscreenFS

//------------------------------------------------------------------------------
//  Vertex and fragment shaders for rendering into the frame buffer.
//
@vs mainVS
@use_uniform_block vsParams
@in vec4 position
@in vec4 normal
@in vec2 texcoord0
@out vec4 nrm
@out vec2 uv
{
    _position = mul(mvp, position);
    uv = texcoord0;
    nrm = normalize(mul(mvp, normal));
}
@end

@fs mainFS
@use_texture_block textures
@in vec4 nrm
@in vec2 uv
{
    
    vec4 c = tex2D(tex, uv * vec2(1.0, -1.0));
    float l = clamp(dot(nrm.xyz, normalize(vec3(1.0, 0.34, -4.0))), 0.0, 1.0) * 2.0;
    _color = vec4(c.xyz * (l + 0.25), 1.0);
    
}
@end

@program MainShader mainVS mainFS

//------------------------------------------------------------------------------
//  common utility functions
//
@code_block Util
_func vec4 gamma(vec4 c) {
    float p = 1.0/2.2;
    return vec4(pow(c.xyz, vec3(p, p, p)), c.w);
}
@end

//------------------------------------------------------------------------------
//  normal visualization shader
//
@uniform_block normalsVSParams VSParams
mat4 mvp ModelViewProjection
@end

@vs normalsVS
@use_uniform_block normalsVSParams
@in vec4 position
@in vec4 normal
@out vec4 nrm
{
    _position = mul(mvp, position);
    nrm = normal;
}
@end

@fs normalsFS
@in vec4 nrm
{
    _color = nrm * 0.5 + 0.5;
}
@end

@program NormalsShader normalsVS normalsFS

//------------------------------------------------------------------------------
//  lambert shader
//
@uniform_block lambertVSParams VSParams
mat4 mvp ModelViewProjection
mat4 model Model
@end

@uniform_block lambertFSParams FSParams
vec3 lightDir LightDir     // light dir in global space
vec4 lightColor LightColor
vec4 matDiffuse MatDiffuse
bool gammaCorrect GammaCorrect
@end

@vs lambertVS
@use_uniform_block lambertVSParams
@in vec4 position
@in vec3 normal
@out vec3 N
{
    _position = mul(mvp, position);
    N = mul(model, vec4(normal, 0.0)).xyz;
}
@end

@fs lambertFS
@use_code_block Util
@use_uniform_block lambertFSParams
@in vec3 N
{
    vec3 l = lightDir;
    vec3 n = normalize(N);
    float n_dot_l = max(dot(n, l), 0.0);
    vec4 col = vec4(lightColor.xyz * matDiffuse.xyz * n_dot_l, 1.0);
    if (gammaCorrect) {
        _color = gamma(col);
    }
    else {
        _color = col;
    }
}
@end

@program LambertShader lambertVS lambertFS

//------------------------------------------------------------------------------
//  phong shader
//
@uniform_block phongVSParams VSParams
mat4 mvp ModelViewProjection
mat4 model Model
@end

@uniform_block phongFSParams FSParams
vec3 lightDir LightDir     // light dir in global space
vec3 eyePos EyePos
vec4 lightColor LightColor
vec4 matDiffuse MatDiffuse
vec4 matSpecular MatSpecular
bool gammaCorrect GammaCorrect
float matSpecularPower MatSpecularPower
@end

@vs phongVS
@use_uniform_block phongVSParams
@in vec4 position
@in vec4 normal
@out vec3 N
@out vec3 P
{
    _position = mul(mvp, position);
    P = mul(model, position).xyz;
    N = mul(model, vec4(normal.xyz, 0.0)).xyz;
}
@end

@fs phongFS
@use_code_block Util
@use_uniform_block phongFSParams
@in vec3 N
@in vec3 P
{
    vec3 l = lightDir;
    vec3 n = normalize(N);
    vec3 v = normalize(eyePos - P);
    float n_dot_l = max(dot(n, l), 0.0);
    vec3 r = reflect(-l, n);
    float r_dot_v = max(dot(r, v), 0.0);
    
    float diff = n_dot_l;
    float spec = pow(r_dot_v, matSpecularPower) * n_dot_l;
    vec4 col = vec4(lightColor.xyz * (matSpecular.xyz*spec + matDiffuse.xyz*diff), 1.0);
    if (gammaCorrect) {
        _color = gamma(col);
    } else {
        _color = col;
    }
}
@end

@program PhongShader phongVS phongFS



